# http://travis-ci.org/#!/jcb91/IPython-notebook-extensions
language: python
sudo: false
addons:
  sauce_connect: true
matrix:
  fast_finish: true
  # Use the built-in venv for linux builds
  # 3.5 as it isn't installed by default. Let tox handle other versions.
  include:
    #   env: TOXENV=docs
    - os: linux
      python: '3.4'
      env: TOXENV=check
    - os: linux
      python: '3.4'
      env: TOXENV=lint
    # linux, various python and notebook versions
    - os: linux
      python: '3.4'
      env: TOXENV=py27-notebook
    - os: linux
      python: '3.4'
      env: TOXENV=py33-notebook
    - os: linux
      python: '3.4'
      env: TOXENV=py34-notebook40
    - os: linux
      python: '3.4'
      env: TOXENV=py34-notebook41
    - os: linux
      python: '3.4'
      env: TOXENV=py34-notebook42
    - os: linux
      python: '3.5'
      env: TOXENV=py35-notebook
    - os: linux
      python: '3.4'
      env: TOXENV=pypy-notebook
    # OSX tests, python 2 & 3
    # Use generic language on osx, get python via terryfy during before_install
    - os: osx
      language: generic
      env: OSX_PYTHON=2.7 TOXENV=py27-notebook
    - os: osx
      language: generic
      env: OSX_PYTHON=3.5 TOXENV=py35-notebook
    # finally, appveyor downloads from windows platform
    - os: linux
      python: '3.4'
      env: TOXENV=appveyorartifacts
  allow_failures:
    - env: TOXENV=appveyorartifacts
    - env: TOXENV=lint
    - env: TOXENV=pypy-notebook
env:
  global:
    - LD_PRELOAD=/lib/x86_64-linux-gnu/libSegFault.so
    - SEGFAULT_SIGNALS=all
    - SAUCE_USERNAME=jcb91
    # sauce access key
    - secure: "eOtQauIuEGnKazIJ2qQTVxnPiiQJR1KXhRiVWGgKAHojrFcV3+RS0AfLalokfOlwxrjBQg2kQwpYZ7b1EeVfxvs0hyjicDm3wpluf36/b3oh8O/kPP87gfd62bDaiYaamN9cHUzFA0a8Qcfla5GRsOcqUzdTfhV2tAZRqTiAjyvdEomtDlcJFnHdB65SJOW6yatBeGakzUmKG9TR6ZQAfTthAFF9Ud4nP6BT6RkOjzThg4SzZZbyc/wKEVNgkS5S8R3D/vx59remkeTW7q54dbzAFtrvOLXzLHydd35xuef1PB9xsgvrGmv7bCsSH01cArl7lOk18vIGps35JzkoScFVyaK6xFLscvaHPykbVDC0+sUgRJkdrLXGmQP13ZQSH1iZoq3anbMFnood8p5qgtPve1oMY8ctsMLvjvE/+56Cze64MleZZzXrgSqOT3Tr0qWI4IpHKMlUeGTrDumC9EvIRmlGys9C8Vl6BTgNFALZpizVDpcnGCYqA9dZZ5BVharuExy+ddnbx6YuWYzhOkeZkjUpRm/Us12Skh5/uqBMfLzyBLp40rSKXl3IOjjOTktAJC7ZGtyMKmtE1ruQvxvjMYCLkhibA3pAmV1E+RDwMH0WNNxhyHOgXZLZVtkMKp4KHjMmf8UjHt9CBwYo996jyVpATWzGx3nITdvlVLc="
before_install:
  - uname -a
  - id -un
  - id -Gn
  # install python on osx
  - 'if [[ ${OSX_PYTHON} ]]; then curl https://raw.githubusercontent.com/MacPython/terryfy/12a4641c4e922eb4a63c82732df8d0c5045430af/travis_tools.sh > travis_tools.sh; fi'
  - 'if [[ ${OSX_PYTHON} ]]; then source travis_tools.sh; fi'
  - 'if [[ ${OSX_PYTHON} ]]; then get_python_environment macpython $OSX_PYTHON venv; fi'
  # install 3.4 as it's the default for tox environments like clean, check
  - 'if [[ ${OSX_PYTHON} ]] && [[ ${OSX_PYTHON} != "3.4" ]]; then install_macpython 3.4; fi'
  # check which python installs are present/active
  - 'if [[ ${OSX_PYTHON} ]]; then echo "$PYTHON_EXE"; fi;'
  - 'if [[ ${OSX_PYTHON} ]]; then if [[ $(which python   ) ]]; then ls -l $(which python   ); else echo "missing"; fi; fi'
  - 'if [[ ${OSX_PYTHON} ]]; then if [[ $(which python2.7) ]]; then ls -l $(which python2.7); else echo "missing"; fi; fi'
  - 'if [[ ${OSX_PYTHON} ]]; then if [[ $(which python3.3) ]]; then ls -l $(which python3.3); else echo "missing"; fi; fi'
  - 'if [[ ${OSX_PYTHON} ]]; then if [[ $(which python3.4) ]]; then ls -l $(which python3.4); else echo "missing"; fi; fi'
  - 'if [[ ${OSX_PYTHON} ]]; then if [[ $(which python3.5) ]]; then ls -l $(which python3.5); else echo "missing"; fi; fi'
  # don't need SAUCE if we're not testing js (which we don't on osx), so disable by clearing env vars
  - 'if [[ ${TRAVIS_OS_NAME} != "linux" ]]; then unset SAUCE_USERNAME && unset SAUCE_ACCESS_KEY && echo unset; fi'
  # don't need sauce for builds which don't start with 'py'
  - 'if [[ ${TOXENV} != py* ]]; then unset SAUCE_USERNAME && unset SAUCE_ACCESS_KEY && echo unset; fi'
install:
  - pip install tox
  - virtualenv --version
before_script:
  # from https://docs.travis-ci.com/user/gui-and-headless-browsers/#Using-xvfb-to-Run-Tests-That-Require-a-GUI
  #  we need to start xvfb for selenium to work correctly
  - 'if [ -n "${SAUCE_ACCESS_KEY}" ]; then export DISPLAY=:99.0; fi'
  - 'if [ -n "${SAUCE_ACCESS_KEY}" ]; then sh -e /etc/init.d/xvfb start; fi'
  - 'if [ -n "${SAUCE_ACCESS_KEY}" ]; then sleep 3; fi # give xvfb some time to start'
script:
  - tox -v -e ${TOXENV}
after_script:
  # test if TOXENV not in set
  # see http://unix.stackexchange.com/a/111518
  - 'if ! [[ ${TOXENV} =~ ^(appveyorartifacts|check)$ ]]; then tox -e coveralls,codecov; fi'
after_failure:
  - more .tox/log/* | cat
  - more .tox/*/log/* | cat
after_success:
before_cache:
  - rm -rf $HOME/.cache/pip/log
cache:
  directories:
    - $HOME/.cache/pip
notifications:
  email: false
